---------------------------------Mergesort----------------------------------------------
merge :: [Int] -> [Int] -> [Int]
merge xs [] = xs
merge [] ys = ys
merge (x:xs) (y:ys) | x <= y = x:merge xs (y:ys)
                                        | otherwise = y:merge ys (x:xs)
 
 
split :: [a] -> Int -> ([a], [a])
split [] _ = ([], [])
split [x] _ = ([x], [])
split l p =  ([a | a <- take p l],[b | b <- drop p l])
                                       
                                                                       
mergesort :: [Int] -> [Int]
mergesort [] = []
mergesort [x] = [x]
mergesort (xs) =        let (a,b) = split xs (div (length xs) 2)
					in merge (mergesort a) (mergesort b)
					
-- Complexidade do nosso mergeSort: log n significa log do tamanho da lista na base 2, ex: log 8 = 3 porque 3^2=8.
-- Se a lista tiver n elementos vamos dividir essa lista (fase split) log n vezes, exemplo: [8,7,6,5,4,3,2,1] 
-- vai virar [8,7,6,5], [4,3,2,1], depois [8,7], [6,5] , [4,3], [2,1], depois [8],[7],[6],[5],[4],[3],[2],[1],
-- ou seja: foram necessários 3 splits ou melhor: log n splits. Daí fazemos os merges que vão comparar os elementos 1 a 1,
-- depois 2 a 2, depois 4 a 4 e assim por diante até que se compare tudo (log n vezes) e cada merge não chega a ter
-- n comparações, logo cada merge é O(n), e fazemos merges log n vezes, então a complexidade doo mergesort é (n log n)
---------------------------------Fim de Mergesort---------------------------------------






-----------------------------------------------------------------------------Heapsort---------------------------------------------

pegaElemento :: Int -> [Int] -> Int 
pegaElemento 1 (a:as) = a
pegaElemento x (a:as) = pegaElemento (x - 1) (as)

pai :: Int -> [Int] -> Int
pai 1 (a:as) = a
pai x (a:as) = pegaElemento (div x 2) (a:as) 

swap :: Int -> Int -> [Int] -> [Int]
swap x1 x2 l =  inicio x1 l ++ [pegaElemento x2 l] ++ meio x1 x2 l ++ [pegaElemento x1 l] ++ fim x2 l

heap :: Int -> [Int] -> [Int]
heap x l
	| x == (length l) + 1 = l
    | pegaElemento x l <=  pai x l = heap (x + 1) l
    | otherwise = heap (div x 2) (swap (div x 2) x l)

inicio :: Int -> [Int] -> [Int]
inicio 1 l = []
inicio x (a:as) = a : inicio (x - 1) as

meio :: Int -> Int -> [Int] -> [Int]
meio p f (a:as)
    | p >= 1 = meio (p - 1) (f-1) as
    | f > 1 = a : meio p (f-1) as
    | otherwise = []

fim :: Int -> [Int] -> [Int]
fim x (a:as)
    | x > 1 = fim (x - 1) as
    | otherwise = as

sort :: [Int] -> [Int]
sort [] = []
sort l = heapSort (broke l) ++ [pegaElemento 1 l]

broke :: [Int] -> [Int]
broke [] = []
broke (a:as) = as

heapSort :: [Int] -> [Int]
heapSort [] = []
heapSort l = sort (heap 1 l)

-------------------------------------------------------------------------------Fim de Heapsort-----------------------------------



----------------------------------------------------------AULA SLIDE 2-----------------------------------------------------------------------------------



menorMaior :: Int -> Int -> Int -> (Int,Int)
menorMaior a b c = (meno, maio)
	where
		meno = menor a b c
		maio = maior a b c

menor :: Int -> Int -> Int -> Int
menor a b c 
	| (a <= b && a <= c) = a
	| (b <= a && b <= c) = b
	| otherwise = c


maior :: Int -> Int -> Int -> Int
maior a b c 
	| (a >= b && a >= c) = a
	| (b >= a && b >= c) = b
	| otherwise = c
--------------------------------------------------------------------i
ordenaTripla :: (Int,Int,Int) -> (Int,Int,Int)
ordenaTripla (a,b,c) 
	| (a <= b) , (a <= c) , (b <= c) = (a, b, c)
	| (a <= b) , (a <= c) , (c <= b) = (a, c, b)
	| (b <= a) , (b <= c) , (a <= c) = (b, a, c)
	| (b <= a) , (b <= c) , (c <= a) = (b, c, a)
	| (c <= a) , (c <= b) , (a <= b) = (c, a, b)
	| (c <= a) , (c <= b) , (b <= a) = (c, b, a)
--------------------------------------------------------------------
type Ponto = (Float, Float)
type Reta = (Ponto, Ponto)

coor1 :: Ponto -> Float
coor1 (a,b) = a

coor2 :: Ponto -> Float
coor2 (a,b) = b

vert :: Reta -> Bool
vert (a,b) 
	| coor1 (a) == coor1 (b) = True
	| otherwise = False 

--------------------------------------------------------------------

pontoY :: Float -> Reta -> Float
pontoY x (a,b) 
	| vert (a,b) == True = 0
	| otherwise = (((coor2 (b) - coor2 (a)) / (coor1 (b) - coor1 (a))) * (x - coor1 (a))) + coor2 (a)

---------------------------------------------------------------------

type Pessoa = String
type Livro = String
type BancoDados = [(Pessoa,Livro)]

baseExemplo :: BancoDados
baseExemplo = 
 [("Sergio","O Senhor dos Aneis"),
 ("Andre","Duna"),
 ("Fernando","Jonathan Strange & Mr. Norrell"), 
 ("Fernando","The Game of Thrones")]

livros :: BancoDados -> Pessoa -> [Livro]
livros bd ppl = [l | (p,l) <- bd, ppl == p ]


emprestimos :: BancoDados -> Livro ->[Pessoa]
emprestimos bd llv = [p | (p,l) <- bd, llv == l]

emprestado :: BancoDados -> Livro -> Bool
emprestado bd llv = if (length ([p | (p,l) <- bd, llv == l]) /= 0) then True 
	else False

qtdEmprestimos :: BancoDados -> Pessoa -> Int
qtdEmprestimos bd ppl = conte ([l | (p,l) <- bd, ppl == p ])

conte :: [Livro] -> Int
conte [] = 0
conte (x:xs) = 1 + conte xs

devolver :: BancoDados -> Pessoa -> Livro -> BancoDados
devolver bd ppl llv = [(p,l) | (p,l) <- bd , llv == l , ppl == p]

-------------------------------------------------------------------
quicksort :: [(Int,Int)]-> [(Int,Int)]
quicksort [] = []
quicksort (x:xs) = ( quicksort [a | a <- xs , fst (a) <= fst (x) ]) ++ [x] ++ (quicksort [ a | a <- xs ,  fst (a) > fst (x)])


--------------------------------------------------------------------

getWord :: String -> String
getWord [] = []
getWord (x:xs) 
	| x /= ' ' = x: getWord xs
	|otherwise = []

--dropWord :: String -> String
--dropSpace :: String -> String
--type Word = String
--splitWords :: String -> [Word]
