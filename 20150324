merge :: [Int] -> [Int] -> [Int]
merge xs [] = xs
merge [] ys = ys
merge (x:xs) (y:ys) | x <= y = x:merge xs (y:ys)
					| otherwise = y:merge ys (x:xs)

split :: [a] -> ([a], [a])
split [] = ([], [])
split [x] = ([x], [])
split (x:y:xys) = (x:xs, y:ys) where (xs, ys) = split xys	
					
									
mergesort :: [Int] -> [Int]
mergesort [] = []
mergesort [x] = [x]
mergesort (xs) =  	let (a,b) = split xs
					in merge (mergesort a) (mergesort b)
