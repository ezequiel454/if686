double :: [Int] -> [Int]
double [] = []
double (x:xs) = x*2:double(xs)

sumPairs :: [Int] -> [Int] -> [Int]
sumPairs l [] = l
sumPairs [] l = l
sumPairs (x:xs) (a:as) = (x+a):sumPairs (xs) (as)

member :: [Int] -> Int -> Bool
member [] x = False
member (x:xs) a | (a == x) = True
				| otherwise = member (xs) a
				
digits :: String -> String
digits	[] = []
digits (x:xs) | member2 ['0','1','2','3','4','5','6','7','8','9'] x = x:digits(xs)
				|otherwise = digits(xs)

				
member2 :: [Char] -> Char -> Bool
member2 [] x = False
member2 (x:xs) a | (a == x) = True
				| otherwise = member2 (xs) a

quicksort :: [Int] -> [Int]
quicksort [] = []
quicksort (x:xs) = (quicksort (menores  x xs)) ++ [x] ++ (quicksort (maiores  x xs))

menores :: Int -> [Int] -> [Int]
menores x [] = []
menores x (a:as)  | x <= a = menores x as
					| otherwise = a:menores x as
					
maiores :: Int -> [Int] -> [Int]
maiores x [] = []
maiores x (a:as)  | x > a = maiores x as
					| otherwise = a:maiores x as
					
