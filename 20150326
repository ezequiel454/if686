--Questão 1

hash:: Int -> [Int] -> [(Int,Int)]
hash _ [] = []
hash i (x:xs) = [(x,hashMap x i (x:xs))] ++ hash i xs

hashMap:: Int -> Int -> [Int] -> Int
hashMap x i l = mod (x+i) (length l)

quicksort::[(Int,Int)] -> [Int]
quicksort [] = []
quicksort [(x,y)] = [x]
quicksort ((a,b):xs) = quicksort [(x,y)|(x,y) <- xs,y < b] ++ [a] ++ quicksort [(x,y)|(x,y) <- xs,y >= b]

hashOrd :: Int -> [Int] -> [Int]
hashOrd _ [] = []
hashOrd i l = quicksort (hash i l)

getN:: Int -> [Int] -> Int
getN _ [] = 1
getN x [y] = 0
getN e (a:as) | (e == a) = 0
              | otherwise = (1 + (getN e as))

get:: Int -> Int -> [Int] -> (Int,Int)
get e i (a:as) = (e,getN e (hashOrd i (a:as)))

hasKey:: Int -> [Int] -> Bool
hasKey _ [] = False
hasKey i l | (i <0) = False
           | (i<= (length l) -1) = True
           | otherwise = False
           
put:: Int -> Int -> Int -> [Int] -> [Int]
put i e ie (a:as) | (i>(length (a:as) - 1)) = (hashOrd ie (a:as)) ++ [e]
                  | (i<0) = [e] ++ (hashOrd ie (a:as))
                  | otherwise = troca i e (hashOrd ie (a:as))

troca:: Int -> Int -> [Int] -> [Int]
troca i e (a:as) | (i==(0)) = e:(as)
                 | otherwise = a:troca (i-1) e as

remove:: Int -> Int -> [Int] -> [Int]
remove i ie (a:as) | (i>(length (a:as) - 1)) = (hashOrd ie (a:as)) ++ [0]
                   | (i<0) = [0] ++ (hashOrd ie (a:as))
                   | otherwise = troca i 0 (hashOrd ie (a:as))

--Executando--

--print (hashOrd 1 [6,4,1,3,5,2])
--print (get 3 1 [6,4,1,3,5,2])
--print (hasKey 6 [6,4,1,3,5,2])
--print (put 3 7 1 [6,4,1,3,5,2])
--print (remove 3 1 [6,4,1,3,5,2])

--Questão 2

comparaConjuntos:: (Eq t) => [t] -> [t] -> String
comparaConjuntos l1 l2 | ((inter l1 l2) == []) = "Conjuntos disjuntos"
                       | (l1 == l2) = "A igual a B"
                       | (not ((inter l1 l2) == l1)), (not ((inter l1 l2)== l2)) = "A intersiona B"
                       | ((diff l1 l2) == []) = "B contem A"
                       | ((diff l2 l1) == []) = "A contem B"

member :: (Eq a) => a -> [a] -> Bool
member _ [] = False
member x (l:ls)
	| x == l = True
	| otherwise = member x ls

union :: (Eq a) => [a] -> [a] -> [a]
union xs [] = xs
union [] ls = ls
union (x:xs) ls
	| (member x ls) = union xs ls
	| otherwise = union xs $ [x] ++ ls

inter :: (Eq a) => [a] -> [a] -> [a]
inter xs ls = [ el | el <- (union xs ls), (member el xs), (member el ls) ]

diff :: (Eq a) => [a] -> [a] -> [a]
diff xs ls = [ el | el <- (inter xs xs), not $ member el ls]


---------------------------------------------------AULA EXERCICIOS----------------------------------------------
take1 :: Int -> [a] -> [a]
take1 _ [] = []
take1 a (x:xs)
	| a == 0 = [] 
	| otherwise = x:take(a-1) xs

drop1 :: Int -> [a] -> [a]
drop1 _ [] = []
drop1 a (x:xs) 
	| a == 0 = x:drop1 a xs
	| otherwise = drop1 (a-1) xs
	

takewhile :: (a->Bool) -> [a] -> [a]
takewhile _ [] = []
takewhile f (x:xs)
	| f x == True = x:takewhile f xs
	| otherwise = []
	

dropwhile :: (a->Bool) -> [a] -> [a]
dropwhile _ [] = []
dropwhile f (x:xs) 
	| f x == True =  dropwhile f xs
	| otherwise = (x:xs)
	
	
quicksort :: Ord t => [(t,t)]-> [(t,t)]
quicksort [] = []
quicksort (x:xs) = ( quicksort [a | a <- xs , fst (a) <= fst (x) ]) ++ [x] ++ (quicksort [ a | a <- xs ,  fst (a) > fst (x)])

quicksort1 :: Ord t => [t]-> [t]
quicksort1 [] = []
quicksort1 (x:xs) = ( quicksort1 [a | a <- xs , fst (a) <= fst (x) ]) ++ [x] ++ (quicksort1 [ a | a <- xs ,  fst (a) > fst (x)])


-----------------------------------------------------------------Agrupar


agrupar :: Eq t =>  [[t]] -> [(t,Int)]
agrupar [] = []
agrupar l =  tiraRep (tupl (aux l))

aux :: [[t]] -> [t]
aux [] = []
aux (x:xs)	=  x++aux xs

tupl :: Eq t => [t] -> [(t,Int)]
tupl [] = []
tupl (x:xs) = [(x,(check x xs))] ++ tupl xs

check :: Eq t => t -> [t] -> Int
check a [] = 1
check a (x:xs) 
	| a == x = 1 + check a xs
	| otherwise = check a xs

tiraRep :: Eq t => [(t,Int)] -> [(t,Int)]
tiraRep ((a,b):[]) = [(a,b)]
tiraRep [] = []
tiraRep ((a,b):xs) = [(a,b)] ++ tiraRep (checkDup (a,b) xs)

checkDup :: Eq t => (t,Int) -> [(t,Int)] -> [(t,Int)]
checkDup _ [] = []
checkDup (a,b) ((c,d):xs) 
	| a == c = checkDup (a,b) xs
	| otherwise = [(c,d)] ++ checkDup (a,b) xs	


-- ex: agrupar [“Fernando”, “Castor”]
